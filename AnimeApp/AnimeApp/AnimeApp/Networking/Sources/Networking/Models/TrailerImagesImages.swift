//
// TrailerImagesImages.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TrailerImagesImages: Codable, Hashable {

    /** Default Image Size URL (120x90) */
    public var defaultImageUrl: String?
    /** Small Image Size URL (640x480) */
    public var smallImageUrl: String?
    /** Medium Image Size URL (320x180) */
    public var mediumImageUrl: String?
    /** Large Image Size URL (480x360) */
    public var largeImageUrl: String?
    /** Maximum Image Size URL (1280x720) */
    public var maximumImageUrl: String?

    public init(defaultImageUrl: String? = nil, smallImageUrl: String? = nil, mediumImageUrl: String? = nil, largeImageUrl: String? = nil, maximumImageUrl: String? = nil) {
        self.defaultImageUrl = defaultImageUrl
        self.smallImageUrl = smallImageUrl
        self.mediumImageUrl = mediumImageUrl
        self.largeImageUrl = largeImageUrl
        self.maximumImageUrl = maximumImageUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case defaultImageUrl = "default_image_url"
        case smallImageUrl = "small_image_url"
        case mediumImageUrl = "medium_image_url"
        case largeImageUrl = "large_image_url"
        case maximumImageUrl = "maximum_image_url"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(defaultImageUrl, forKey: .defaultImageUrl)
        try container.encodeIfPresent(smallImageUrl, forKey: .smallImageUrl)
        try container.encodeIfPresent(mediumImageUrl, forKey: .mediumImageUrl)
        try container.encodeIfPresent(largeImageUrl, forKey: .largeImageUrl)
        try container.encodeIfPresent(maximumImageUrl, forKey: .maximumImageUrl)
    }
}

